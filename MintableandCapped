pragma solidity 0.6.8;

contract dummyToken
{
    
   mapping(address => uint256) balances;
   mapping(address => mapping(address =>uint256)) approved;
   event Transfer(address indexed _from, address indexed _to, uint256 _value);
   event Approval(address indexed _spender, uint256 _value);
    
    address _owner;
    uint256 _totalsupply;
    
    function name(string memory _name) public pure returns(string memory)
    {
        return _name;
    }
    function symbol(string memory _symbol) public pure returns (string memory)
    {
        return _symbol;
    }
    
    function decimals(uint256 _decimals) public pure returns (uint256)
    {
        return _decimals;
    }
    
    function totalSupply() public view returns (uint256)
    {
    }
    
    function balanceOf(address _owner) public view returns (uint256 balance)
    {
        return balances[_owner];
    }
    function transfer(address _to, uint256 _value) public returns (bool success)
    {
        require(_value >= 0 || balances[msg.sender] >= _value, "value is insufficient");
        
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
    
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)
    {
        require(_value >= 0 || allowance(_from, msg.sender)>= _value || balances[_from] >= _value,"value is insufficient");
        balances[_from] -= _value;
        approved[_from][msg.sender] -=_value;
        balances[_to] -= _value;
        //return true;
        emit Transfer(_from,_to,_value);
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success)
    {
        require(_value >= 0 || balances[msg.sender] >= _value,"insufficient");
        
        //approved [owner][spender]= allowedvalue;
        
        approved[msg.sender][_spender] = _value;
        //return true;
        emit Approval(_spender, _value);
    }
    
    function allowance(address _owner, address _spender) public view returns (uint256 remaining)
    {
        return approved[_owner][_spender];
    }
    
    modifier onlyOwner()
    {
        if(msg.sender == _owner)
        _;
    }

    function mint() public onlyOwner returns(uint256)  
    {
    
        balances[msg.sender] += 1;
        _totalsupply += 1;
        return _totalsupply;
        
    }
    
    function capped(uint256 cap) public
    {
        require(mint() <= cap,"limit exceeded");
    }
    
   
}
