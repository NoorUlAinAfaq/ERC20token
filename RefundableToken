pragma solidity ^0.5.11;

import "./ERC20byNoor.sol";



contract RefundableToken is ERC20Basic {
//    using SafeMath for uint256;
    
    
    uint256 public constant refundTime = 30 days;
    
    mapping (address => uint256) public depositedETH;
    mapping (address => uint256) public depositedToken;

    address public etherWallet;
   ERC20Basic public token;
   
    uint256 public refundStartTime;
    event RefundedETH(address beneficiary, uint256 weiAmount);
    
    
    modifier  isInRefundTimeFrame() {
        require(refundStartTime <= now && refundStartTime + refundTime > now);
        _;
    }

    modifier isRefundTimeFrameExceeded() {
        require(refundStartTime + refundTime < now);
        _;
    }
    

    function refundETH(uint256 ETHToRefundAmountWei) isInRefundTimeFrame public {
        require(ETHToRefundAmountWei != 0);

        uint256 depositedTokenValue = depositedToken[msg.sender];
        uint256 depositedETHValue = depositedETH[msg.sender];

        require(ETHToRefundAmountWei <= depositedETHValue);

        uint256 refundTokens = ETHToRefundAmountWei*(depositedTokenValue)/(depositedETHValue);

        assert(refundTokens > 0);

        depositedETH[msg.sender] = depositedETHValue.sub(ETHToRefundAmountWei);
        depositedToken[msg.sender] = depositedTokenValue.sub(refundTokens);

        
        msg.sender.transfer(ETHToRefundAmountWei);

      emit RefundedETH(msg.sender, ETHToRefundAmountWei);
    }

}
