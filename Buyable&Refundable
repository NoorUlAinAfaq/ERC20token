pragma solidity ^0.6.0;

import "./ERC20byNoor.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol";
//import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol";


contract buyable is ERC20Basic
{
   address public owner;
   address buyer;
   address delegate;
    ERC20Basic public token;
    uint256 public tokenPrice = 200;
    uint256 public tokensSold=0;
    uint256 public amountobuy;
    event sell(address owner , uint256 amount);
    event ownerShipTransferred(address owner,address newOwner);
    uint256 public constant refundTime = 30 days;
    bool isFinalized = true;

constructor()
ERC20Basic("My Buyable Token","BTK") public payable
{
         owner = msg.sender;
       
}

function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }
modifier isEOA()
{
    if(isContract(buyer) == false)
    _;
}

function buyTokens(uint _numberOfTokens) isEOA payable external
{
    
    uint256 amount = _numberOfTokens*tokenPrice;
    transfer(msg.sender,amount);
    tokensSold += _numberOfTokens;
    emit sell(msg.sender, _numberOfTokens);
}

function adjustPrice(uint256 newPrice) onlyOwner public
{
    tokenPrice=newPrice;
    
}

function transferOwnerShip(address newOwner) onlyOwner public
{
    require(newOwner != address(0));
    owner= newOwner;
    emit ownerShipTransferred(owner, newOwner);
}

     function setDelegate(address  _delegate) public onlyOwner returns (address) {
     delegate= _delegate;
    }
    
    // restrict a function to only owner or delegate
     modifier onlyOwnerOrDelegate(){
        require(msg.sender == owner || msg.sender == delegate ,"BCC1: Only owner or delegate can execute this feature");
        _;
    }
    
    
    function setPrice(uint256  _tokenPrice) public onlyOwnerOrDelegate returns (uint8) {
     tokenPrice= _tokenPrice;
    
    }
    
    
    function calculateNumberOfTokens (uint256 _investment) public returns(uint256)
    {
        return (_investment/tokenPrice);
    }

    
    mapping (address => uint256) public depositedETH;
    mapping (address => uint256) public depositedToken;

    address public etherWallet;
   //ERC20Basic public token;
   
    uint256 public refundStartTime = now;
    event RefundedETH(address beneficiary, uint256 weiAmount);
    
    
    modifier  isInRefundTimeFrame() {
        require(refundStartTime <= now && refundStartTime + refundTime > now);
        _;
    }

    modifier isRefundTimeFrameExceeded() {
        require(refundStartTime + refundTime < now);
        _;
    }
    
    
    function refundETH(uint256 ETHToRefundAmountWei) isInRefundTimeFrame isRefundTimeFrameExceeded public payable{
        require(ETHToRefundAmountWei != 0);

        uint256 depositedTokenValue = depositedToken[msg.sender];
        uint256 depositedETHValue = depositedETH[msg.sender];

        require(ETHToRefundAmountWei <= depositedETHValue);

        uint256 refundTokens = ETHToRefundAmountWei*(depositedTokenValue)/(depositedETHValue);

        assert(refundTokens > 0);

        depositedETH[msg.sender] = depositedETHValue.sub(ETHToRefundAmountWei);
        depositedToken[msg.sender] = depositedTokenValue.sub(refundTokens);

        
        msg.sender.transfer(ETHToRefundAmountWei);

      emit RefundedETH(msg.sender, ETHToRefundAmountWei);
}
}
